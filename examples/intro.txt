#===
# 1. Basic gevent TCP server

import gevent
from gevent.server import StreamServer

def handle_tcp(socket, address):
    print 'new tcp connection!'
    while True:
        socket.send('hello\n')
        gevent.sleep(1)

tcp_server = StreamServer(('127.0.0.1', 1234), handle_tcp)
tcp_server.serve_forever()

#===
# 2. Basic gevent TCP server and WSGI server

import gevent
from gevent.pywsgi import WSGIServer
from gevent.server import StreamServer

def handle_http(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    print 'new http request!'
    return ["hello world"]

def handle_tcp(socket, address):
    print 'new tcp connection!'
    while True:
        socket.send('hello\n')
        gevent.sleep(1)

tcp_server = StreamServer(('127.0.0.1', 1234), handle_tcp)
tcp_server.start()

http_server = WSGIServer(('127.0.0.1', 8080), handle_http)
http_server.serve_forever()

#===
# 3. TCP server, WSGI server, and persistent TCP client

import gevent
from gevent.pywsgi import WSGIServer
from gevent.server import StreamServer
from gevent.socket import create_connection

def handle_http(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    print 'new http request!'
    return ["hello world"]

def handle_tcp(socket, address):
    print 'new tcp connection!'
    while True:
        socket.send('hello\n')
        gevent.sleep(1)

def client_connect(address):
    sockfile = create_connection(address).makefile()
    while True:
        line = sockfile.readline() # returns None on EOF
        if line is not None:
            print "<<<", line,
        else:
            break

tcp_server = StreamServer(('127.0.0.1', 1234), handle_tcp)
tcp_server.start()

gevent.spawn(client_connect, ('127.0.0.1', 1234))

http_server = WSGIServer(('127.0.0.1', 8080), handle_http)
http_server.serve_forever()

#===
# 4. Organizing with greenlets

import gevent
from gevent.pywsgi import WSGIServer
from gevent.server import StreamServer
from gevent.socket import create_connection

def handle_http(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    print 'new http request!'
    return ["hello world"]

def handle_tcp(socket, address):
    print 'new tcp connection!'
    while True:
        socket.send('hello\n')
        gevent.sleep(1)

def client_connect(address):
    sockfile = create_connection(address).makefile()
    while True:
        line = sockfile.readline() # returns None on EOF
        if line is not None:
            print "<<<", line,
        else:
            break

tcp_server = StreamServer(('127.0.0.1', 1234), handle_tcp)
http_server = WSGIServer(('127.0.0.1', 8080), handle_http)
greenlets = [
    gevent.spawn(tcp_server.serve_forever),
    gevent.spawn(http_server.serve_forever),
    gevent.spawn(client_connect, ('127.0.0.1', 1234)),
]
gevent.joinall(greenlets)

#===
# Now you need gevent-tools, or write your own:
# * Organizing with Services
# * Daemonizing (easy, right?)
# * Daemon options/infrastructure (chroot, privs, pidfile, logfile)
# * Daemon/"service" management (start, stop, restart, reload?)
# * Configuration
#===
# 5. Wrap client in a service, create parent service

import gevent
from gevent.pywsgi import WSGIServer
from gevent.server import StreamServer
from gevent.socket import create_connection

from gevent_tools.service import Service

class TcpClient(Service):
    def __init__(self, address, handler):
        self.address = address
        self.handler = handler
        
    def do_start(self):
        self.spawn(self.handler, self.address)

def handle_http(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    print 'new http request!'
    return ["hello world"]

def handle_tcp(socket, address):
    print 'new tcp connection!'
    while True:
        socket.send('hello\n')
        gevent.sleep(1)

def client_connect(address):
    sockfile = create_connection(address).makefile()
    while True:
        line = sockfile.readline() # returns None on EOF
        if line is not None:
            print "<<<", line,
        else:
            break

app = Service()
app.add_service(StreamServer(('127.0.0.1', 1234), handle_tcp))
app.add_service(WSGIServer(('127.0.0.1', 8080), handle_http))
app.add_service(TcpClient(('127.0.0.1', 1234), client_connect))
app.serve_forever()

#===
# 6. Consolidate into an application service

import gevent
from gevent.pywsgi import WSGIServer
from gevent.server import StreamServer
from gevent.socket import create_connection

from gevent_tools.service import Service

class TcpClient(Service):
    def __init__(self, address, handler):
        self.address = address
        self.handler = handler
        
    def do_start(self):
        self.spawn(self.handler, self.address)

class MyApplication(Service):
    def __init__(self):
        super(MyApplication, self).__init__()
        
        self.add_service(WSGIServer(('127.0.0.1', 8080), self.handle_http))
        self.add_service(StreamServer(('127.0.0.1', 1234), self.handle_tcp))
        self.add_service(TcpClient(('127.0.0.1', 1234), self.client_connect))
    
    def client_connect(self, address):
        sockfile = create_connection(address).makefile()
        while True:
            line = sockfile.readline() # returns None on EOF
            if line is not None:
                print "<<<", line,
            else:
                break
    
    def handle_tcp(self, socket, address):
        print 'new tcp connection!'
        while True:
            socket.send('hello\n')
            gevent.sleep(1)

    def handle_http(self, env, start_response):
        start_response('200 OK', [('Content-Type', 'text/html')])
        print 'new http request!'
        return ["hello world"]

app = MyApplication()
app.serve_forever()

#===
# 7. Running and configuring daemon with serviced

# example.conf.py

pidfile = 'example.pid'
logfile = 'example.log'

def service():
    from example import MyApplication
    return MyApplication()

# $ serviced -C example.conf.py run
# $ serviced -C example.conf.py start
# $ serviced -C example.conf.py restart
# $ serviced -C example.conf.py stop
# $ serviced -C example.conf.py --logfile example2.log start
# $ serviced -C example.conf.py stop
# $ serviced --help

#===
# 10. Using configuration file for app configuration

# example.conf.py

pidfile = 'example.pid'
logfile = 'example.log'
http_port = 8080
tcp_port = 1234
client_connect = ('127.0.0.1', 1234)

def service():
    from example import MyApplication
    return MyApplication(globals())

# example.py
# ...
class MyApplication(Service):
    def __init__(self, config):
        super(MyApplication, self).__init__()
        
        self.add_service(WSGIServer(config['http_port'], self.handle_http))
        self.add_service(StreamServer(config['tcp_port'], self.handle_tcp))
        self.add_service(TcpClient(('127.0.0.1', config['client_connect']), self.client_connect))
# ...

# $ serviced -C example.conf.py -X 'http_port = 7070' run

#===
# 11. Sane application configuration

# example.conf.py

pidfile = 'example.pid'
logfile = 'example.log'
http_port = 8080
tcp_port = 1234
connect_address = ('127.0.0.1', 1234)

def service():
    from example import MyApplication
    return MyApplication()

# example.py
# ...
from gevent_tools.config import Option

class MyApplication(Service):
    http_port = Option('http_port')
    tcp_port = Option('tcp_port')
    connect_address = Option('connect_address')
    
    def __init__(self):
        super(MyApplication, self).__init__()
        
        self.add_service(WSGIServer(('127.0.0.1', self.http_port), self.handle_http))
        self.add_service(StreamServer(('127.0.0.1', self.tcp_port), self.handle_tcp))
        self.add_service(TcpClient(self.connect_address, self.client_connect))
# ...

#===
# 12. Reload hooks?